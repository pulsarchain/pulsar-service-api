<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bosha.dapp.server.mapper.SparksWitnessMapper">
    <resultMap id="BaseResultMap" type="com.bosha.dapp.api.entity.SparksWitness">
        <!--@mbg.generated-->
        <!--@Table sparks_witness-->
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="address" jdbcType="VARCHAR" property="address"/>
        <result column="witness_address" jdbcType="VARCHAR" property="witnessAddress"/>
        <result column="type" jdbcType="INTEGER" property="type"/>
        <result column="releated_id" jdbcType="BIGINT" property="releatedId"/>
        <result column="amount" jdbcType="DECIMAL" property="amount"/>
        <result column="hash" jdbcType="VARCHAR" property="hash"/>
        <result column="extra" jdbcType="VARCHAR" property="extra"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
    </resultMap>
    <sql id="Base_Column_List">
        <!--@mbg.generated-->
        id, address, witness_address, `type`, releated_id, amount, hash, extra, create_time,
        update_time
    </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        <!--@mbg.generated-->
        select
        <include refid="Base_Column_List"/>
        from sparks_witness
        where id = #{id,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        <!--@mbg.generated-->
        delete from sparks_witness
        where id = #{id,jdbcType=BIGINT}
    </delete>
    <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.bosha.dapp.api.entity.SparksWitness"
            useGeneratedKeys="true">
        <!--@mbg.generated-->
        insert into sparks_witness
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="address != null">
                address,
            </if>
            <if test="witnessAddress != null">
                witness_address,
            </if>
            <if test="type != null">
                `type`,
            </if>
            <if test="releatedId != null">
                releated_id,
            </if>
            <if test="amount != null">
                amount,
            </if>
            <if test="hash != null">
                hash,
            </if>
            <if test="extra != null">
                extra,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="address != null">
                #{address,jdbcType=VARCHAR},
            </if>
            <if test="witnessAddress != null">
                #{witnessAddress,jdbcType=VARCHAR},
            </if>
            <if test="type != null">
                #{type,jdbcType=INTEGER},
            </if>
            <if test="releatedId != null">
                #{releatedId,jdbcType=BIGINT},
            </if>
            <if test="amount != null">
                #{amount,jdbcType=DECIMAL},
            </if>
            <if test="hash != null">
                #{hash,jdbcType=VARCHAR},
            </if>
            <if test="extra != null">
                #{extra,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.bosha.dapp.api.entity.SparksWitness">
        <!--@mbg.generated-->
        update sparks_witness
        <set>
            <if test="address != null">
                address = #{address,jdbcType=VARCHAR},
            </if>
            <if test="witnessAddress != null">
                witness_address = #{witnessAddress,jdbcType=VARCHAR},
            </if>
            <if test="type != null">
                `type` = #{type,jdbcType=INTEGER},
            </if>
            <if test="releatedId != null">
                releated_id = #{releatedId,jdbcType=BIGINT},
            </if>
            <if test="amount != null">
                amount = #{amount,jdbcType=DECIMAL},
            </if>
            <if test="hash != null">
                hash = #{hash,jdbcType=VARCHAR},
            </if>
            <if test="extra != null">
                extra = #{extra,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateBatchSelective" parameterType="java.util.List">
        <!--@mbg.generated-->
        update sparks_witness
        <trim prefix="set" suffixOverrides=",">
            <trim prefix="address = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    <if test="item.address != null">
                        when id = #{item.id,jdbcType=BIGINT} then #{item.address,jdbcType=VARCHAR}
                    </if>
                </foreach>
            </trim>
            <trim prefix="witness_address = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    <if test="item.witnessAddress != null">
                        when id = #{item.id,jdbcType=BIGINT} then #{item.witnessAddress,jdbcType=VARCHAR}
                    </if>
                </foreach>
            </trim>
            <trim prefix="`type` = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    <if test="item.type != null">
                        when id = #{item.id,jdbcType=BIGINT} then #{item.type,jdbcType=INTEGER}
                    </if>
                </foreach>
            </trim>
            <trim prefix="releated_id = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    <if test="item.releatedId != null">
                        when id = #{item.id,jdbcType=BIGINT} then #{item.releatedId,jdbcType=BIGINT}
                    </if>
                </foreach>
            </trim>
            <trim prefix="amount = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    <if test="item.amount != null">
                        when id = #{item.id,jdbcType=BIGINT} then #{item.amount,jdbcType=DECIMAL}
                    </if>
                </foreach>
            </trim>
            <trim prefix="hash = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    <if test="item.hash != null">
                        when id = #{item.id,jdbcType=BIGINT} then #{item.hash,jdbcType=VARCHAR}
                    </if>
                </foreach>
            </trim>
            <trim prefix="extra = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    <if test="item.extra != null">
                        when id = #{item.id,jdbcType=BIGINT} then #{item.extra,jdbcType=VARCHAR}
                    </if>
                </foreach>
            </trim>
            <trim prefix="create_time = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    <if test="item.createTime != null">
                        when id = #{item.id,jdbcType=BIGINT} then #{item.createTime,jdbcType=TIMESTAMP}
                    </if>
                </foreach>
            </trim>
            <trim prefix="update_time = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    <if test="item.updateTime != null">
                        when id = #{item.id,jdbcType=BIGINT} then #{item.updateTime,jdbcType=TIMESTAMP}
                    </if>
                </foreach>
            </trim>
        </trim>
        where id in
        <foreach close=")" collection="list" item="item" open="(" separator=", ">
            #{item.id,jdbcType=BIGINT}
        </foreach>
    </update>
    <insert id="batchInsert" keyColumn="id" keyProperty="id" parameterType="map" useGeneratedKeys="true">
        <!--@mbg.generated-->
        insert into sparks_witness
        (address, witness_address, `type`, releated_id, amount, hash, extra, create_time,
        update_time)
        values
        <foreach collection="list" item="item" separator=",">
            (#{item.address,jdbcType=VARCHAR}, #{item.witnessAddress,jdbcType=VARCHAR}, #{item.type,jdbcType=INTEGER},
            #{item.releatedId,jdbcType=BIGINT}, #{item.amount,jdbcType=DECIMAL}, #{item.hash,jdbcType=VARCHAR},
            #{item.extra,jdbcType=VARCHAR}, #{item.createTime,jdbcType=TIMESTAMP}, #{item.updateTime,jdbcType=TIMESTAMP}
            )
        </foreach>
    </insert>
    <select id="list" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from sparks_witness sw
        where sw.releated_id = #{relatedId}
        and sw.amount is not null
        order by update_time desc
    </select>
    <select id="get" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from sparks_witness
        where address = #{address}
        and witness_address = #{witnessAddress}
        and releated_id = #{id}
    </select>
    <select id="getByAddressAndWitnessAndId" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from sparks_witness where address = #{address} and witness_address = #{witnessAddress} and releated_id = #{id}
    </select>
    <select id="getByHash" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from sparks_witness
        where hash = #{hash}
    </select>
    <select id="countSuccess" resultType="int">
        select count(*)
        from sparks_witness
        where releated_id = #{id}
          and amount is not null
    </select>
</mapper>