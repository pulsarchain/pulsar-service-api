<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bosha.star.server.mapper.LiveMiningMapper">
    <resultMap id="BaseResultMap" type="com.bosha.star.api.entity.LiveMining">
        <!--@mbg.generated-->
        <!--@Table live_mining-->
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="address" jdbcType="VARCHAR" property="address"/>
        <result column="system_address" jdbcType="VARCHAR" property="systemAddress"/>
        <result column="charity_address" jdbcType="VARCHAR" property="charityAddress"/>
        <result column="contract_address" jdbcType="VARCHAR" property="contractAddress"/>
        <result column="title" jdbcType="VARCHAR" property="title"/>
        <result column="intro" jdbcType="VARCHAR" property="intro"/>
        <result column="cover_img" jdbcType="VARCHAR" property="coverImg"/>
        <result column="live_start_time" jdbcType="TIMESTAMP" property="liveStartTime"/>
        <result column="live_end_time" jdbcType="TIMESTAMP" property="liveEndTime"/>
        <result column="actual_live_start_time" jdbcType="TIMESTAMP" property="actualLiveStartTime"/>
        <result column="amount" jdbcType="DECIMAL" property="amount"/>
        <result column="left_amount" jdbcType="DECIMAL" property="leftAmount"/>
        <result column="fee" jdbcType="DECIMAL" property="fee"/>
        <result column="status" jdbcType="INTEGER" property="status"/>
        <result column="share_num" jdbcType="INTEGER" property="shareNum"/>
        <result column="share_pul" jdbcType="DECIMAL" property="sharePul"/>
        <result column="comment_num" jdbcType="INTEGER" property="commentNum"/>
        <result column="comment_pul" jdbcType="DECIMAL" property="commentPul"/>
        <result column="view" jdbcType="DECIMAL" property="view"/>
        <result column="invite_start" jdbcType="INTEGER" property="inviteStart"/>
        <result column="invite_end" jdbcType="INTEGER" property="inviteEnd"/>
        <result column="online_num" jdbcType="INTEGER" property="onlineNum"/>
        <result column="miner_num" jdbcType="INTEGER" property="minerNum"/>
        <result column="hash" jdbcType="VARCHAR" property="hash"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
    </resultMap>
    <sql id="Base_Column_List">
        <!--@mbg.generated-->
        id, address, system_address, charity_address, contract_address, title, intro, cover_img,
        live_start_time, live_end_time, actual_live_start_time, amount, left_amount, fee,
        `status`, share_num, share_pul, comment_num, comment_pul, `view`, invite_start, invite_end,
        online_num, miner_num, hash, create_time, update_time
    </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        <!--@mbg.generated-->
        select
        <include refid="Base_Column_List"/>
        from live_mining
        where id = #{id,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        <!--@mbg.generated-->
        delete from live_mining
        where id = #{id,jdbcType=BIGINT}
    </delete>
    <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.bosha.star.api.entity.LiveMining"
            useGeneratedKeys="true">
        <!--@mbg.generated-->
        insert into live_mining
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="address != null">
                address,
            </if>
            <if test="systemAddress != null">
                system_address,
            </if>
            <if test="charityAddress != null">
                charity_address,
            </if>
            <if test="contractAddress != null">
                contract_address,
            </if>
            <if test="title != null">
                title,
            </if>
            <if test="intro != null">
                intro,
            </if>
            <if test="coverImg != null">
                cover_img,
            </if>
            <if test="liveStartTime != null">
                live_start_time,
            </if>
            <if test="liveEndTime != null">
                live_end_time,
            </if>
            <if test="actualLiveStartTime != null">
                actual_live_start_time,
            </if>
            <if test="amount != null">
                amount,
            </if>
            <if test="leftAmount != null">
                left_amount,
            </if>
            <if test="fee != null">
                fee,
            </if>
            <if test="status != null">
                `status`,
            </if>
            <if test="shareNum != null">
                share_num,
            </if>
            <if test="sharePul != null">
                share_pul,
            </if>
            <if test="commentNum != null">
                comment_num,
            </if>
            <if test="commentPul != null">
                comment_pul,
            </if>
            <if test="view != null">
                `view`,
            </if>
            <if test="inviteStart != null">
                invite_start,
            </if>
            <if test="inviteEnd != null">
                invite_end,
            </if>
            <if test="onlineNum != null">
                online_num,
            </if>
            <if test="minerNum != null">
                miner_num,
            </if>
            <if test="hash != null">
                hash,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="address != null">
                #{address,jdbcType=VARCHAR},
            </if>
            <if test="systemAddress != null">
                #{systemAddress,jdbcType=VARCHAR},
            </if>
            <if test="charityAddress != null">
                #{charityAddress,jdbcType=VARCHAR},
            </if>
            <if test="contractAddress != null">
                #{contractAddress,jdbcType=VARCHAR},
            </if>
            <if test="title != null">
                #{title,jdbcType=VARCHAR},
            </if>
            <if test="intro != null">
                #{intro,jdbcType=VARCHAR},
            </if>
            <if test="coverImg != null">
                #{coverImg,jdbcType=VARCHAR},
            </if>
            <if test="liveStartTime != null">
                #{liveStartTime,jdbcType=TIMESTAMP},
            </if>
            <if test="liveEndTime != null">
                #{liveEndTime,jdbcType=TIMESTAMP},
            </if>
            <if test="actualLiveStartTime != null">
                #{actualLiveStartTime,jdbcType=TIMESTAMP},
            </if>
            <if test="amount != null">
                #{amount,jdbcType=DECIMAL},
            </if>
            <if test="leftAmount != null">
                #{leftAmount,jdbcType=DECIMAL},
            </if>
            <if test="fee != null">
                #{fee,jdbcType=DECIMAL},
            </if>
            <if test="status != null">
                #{status,jdbcType=INTEGER},
            </if>
            <if test="shareNum != null">
                #{shareNum,jdbcType=INTEGER},
            </if>
            <if test="sharePul != null">
                #{sharePul,jdbcType=DECIMAL},
            </if>
            <if test="commentNum != null">
                #{commentNum,jdbcType=INTEGER},
            </if>
            <if test="commentPul != null">
                #{commentPul,jdbcType=DECIMAL},
            </if>
            <if test="view != null">
                #{view,jdbcType=DECIMAL},
            </if>
            <if test="inviteStart != null">
                #{inviteStart,jdbcType=INTEGER},
            </if>
            <if test="inviteEnd != null">
                #{inviteEnd,jdbcType=INTEGER},
            </if>
            <if test="onlineNum != null">
                #{onlineNum,jdbcType=INTEGER},
            </if>
            <if test="minerNum != null">
                #{minerNum,jdbcType=INTEGER},
            </if>
            <if test="hash != null">
                #{hash,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.bosha.star.api.entity.LiveMining">
        <!--@mbg.generated-->
        update live_mining
        <set>
            <if test="address != null">
                address = #{address,jdbcType=VARCHAR},
            </if>
            <if test="systemAddress != null">
                system_address = #{systemAddress,jdbcType=VARCHAR},
            </if>
            <if test="charityAddress != null">
                charity_address = #{charityAddress,jdbcType=VARCHAR},
            </if>
            <if test="contractAddress != null">
                contract_address = #{contractAddress,jdbcType=VARCHAR},
            </if>
            <if test="title != null">
                title = #{title,jdbcType=VARCHAR},
            </if>
            <if test="intro != null">
                intro = #{intro,jdbcType=VARCHAR},
            </if>
            <if test="coverImg != null">
                cover_img = #{coverImg,jdbcType=VARCHAR},
            </if>
            <if test="liveStartTime != null">
                live_start_time = #{liveStartTime,jdbcType=TIMESTAMP},
            </if>
            <if test="liveEndTime != null">
                live_end_time = #{liveEndTime,jdbcType=TIMESTAMP},
            </if>
            <if test="actualLiveStartTime != null">
                actual_live_start_time = #{actualLiveStartTime,jdbcType=TIMESTAMP},
            </if>
            <if test="amount != null">
                amount = #{amount,jdbcType=DECIMAL},
            </if>
            <if test="leftAmount != null">
                left_amount = #{leftAmount,jdbcType=DECIMAL},
            </if>
            <if test="fee != null">
                fee = #{fee,jdbcType=DECIMAL},
            </if>
            <if test="status != null">
                `status` = #{status,jdbcType=INTEGER},
            </if>
            <if test="shareNum != null">
                share_num = #{shareNum,jdbcType=INTEGER},
            </if>
            <if test="sharePul != null">
                share_pul = #{sharePul,jdbcType=DECIMAL},
            </if>
            <if test="commentNum != null">
                comment_num = #{commentNum,jdbcType=INTEGER},
            </if>
            <if test="commentPul != null">
                comment_pul = #{commentPul,jdbcType=DECIMAL},
            </if>
            <if test="view != null">
                `view` = #{view,jdbcType=DECIMAL},
            </if>
            <if test="inviteStart != null">
                invite_start = #{inviteStart,jdbcType=INTEGER},
            </if>
            <if test="inviteEnd != null">
                invite_end = #{inviteEnd,jdbcType=INTEGER},
            </if>
            <if test="onlineNum != null">
                online_num = #{onlineNum,jdbcType=INTEGER},
            </if>
            <if test="minerNum != null">
                miner_num = #{minerNum,jdbcType=INTEGER},
            </if>
            <if test="hash != null">
                hash = #{hash,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <insert id="batchInsert" keyColumn="id" keyProperty="id" parameterType="map" useGeneratedKeys="true">
        <!--@mbg.generated-->
        insert into live_mining
        (address, system_address, charity_address, contract_address, title, intro, cover_img,
        live_start_time, live_end_time, actual_live_start_time, amount, left_amount, fee,
        `status`, share_num, share_pul, comment_num, comment_pul, `view`, invite_start,
        invite_end, online_num, miner_num, hash, create_time, update_time)
        values
        <foreach collection="list" item="item" separator=",">
            (#{item.address,jdbcType=VARCHAR}, #{item.systemAddress,jdbcType=VARCHAR},
            #{item.charityAddress,jdbcType=VARCHAR},
            #{item.contractAddress,jdbcType=VARCHAR}, #{item.title,jdbcType=VARCHAR}, #{item.intro,jdbcType=VARCHAR},
            #{item.coverImg,jdbcType=VARCHAR}, #{item.liveStartTime,jdbcType=TIMESTAMP},
            #{item.liveEndTime,jdbcType=TIMESTAMP},
            #{item.actualLiveStartTime,jdbcType=TIMESTAMP}, #{item.amount,jdbcType=DECIMAL},
            #{item.leftAmount,jdbcType=DECIMAL}, #{item.fee,jdbcType=DECIMAL}, #{item.status,jdbcType=INTEGER},
            #{item.shareNum,jdbcType=INTEGER}, #{item.sharePul,jdbcType=DECIMAL}, #{item.commentNum,jdbcType=INTEGER},
            #{item.commentPul,jdbcType=DECIMAL}, #{item.view,jdbcType=DECIMAL}, #{item.inviteStart,jdbcType=INTEGER},
            #{item.inviteEnd,jdbcType=INTEGER}, #{item.onlineNum,jdbcType=INTEGER}, #{item.minerNum,jdbcType=INTEGER},
            #{item.hash,jdbcType=VARCHAR}, #{item.createTime,jdbcType=TIMESTAMP}, #{item.updateTime,jdbcType=TIMESTAMP}
            )
        </foreach>
    </insert>
    <insert id="insertOrUpdate" keyColumn="id" keyProperty="id" parameterType="com.bosha.star.api.entity.LiveMining"
            useGeneratedKeys="true">
        <!--@mbg.generated-->
        insert into live_mining
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            address,
            system_address,
            charity_address,
            contract_address,
            title,
            intro,
            cover_img,
            live_start_time,
            live_end_time,
            actual_live_start_time,
            amount,
            left_amount,
            fee,
            `status`,
            share_num,
            share_pul,
            comment_num,
            comment_pul,
            `view`,
            invite_start,
            invite_end,
            online_num,
            miner_num,
            hash,
            create_time,
            update_time,
        </trim>
        values
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            #{address,jdbcType=VARCHAR},
            #{systemAddress,jdbcType=VARCHAR},
            #{charityAddress,jdbcType=VARCHAR},
            #{contractAddress,jdbcType=VARCHAR},
            #{title,jdbcType=VARCHAR},
            #{intro,jdbcType=VARCHAR},
            #{coverImg,jdbcType=VARCHAR},
            #{liveStartTime,jdbcType=TIMESTAMP},
            #{liveEndTime,jdbcType=TIMESTAMP},
            #{actualLiveStartTime,jdbcType=TIMESTAMP},
            #{amount,jdbcType=DECIMAL},
            #{leftAmount,jdbcType=DECIMAL},
            #{fee,jdbcType=DECIMAL},
            #{status,jdbcType=INTEGER},
            #{shareNum,jdbcType=INTEGER},
            #{sharePul,jdbcType=DECIMAL},
            #{commentNum,jdbcType=INTEGER},
            #{commentPul,jdbcType=DECIMAL},
            #{view,jdbcType=DECIMAL},
            #{inviteStart,jdbcType=INTEGER},
            #{inviteEnd,jdbcType=INTEGER},
            #{onlineNum,jdbcType=INTEGER},
            #{minerNum,jdbcType=INTEGER},
            #{hash,jdbcType=VARCHAR},
            #{createTime,jdbcType=TIMESTAMP},
            #{updateTime,jdbcType=TIMESTAMP},
        </trim>
        on duplicate key update
        <trim suffixOverrides=",">
            <if test="id != null">
                id = #{id,jdbcType=BIGINT},
            </if>
            address = #{address,jdbcType=VARCHAR},
            system_address = #{systemAddress,jdbcType=VARCHAR},
            charity_address = #{charityAddress,jdbcType=VARCHAR},
            contract_address = #{contractAddress,jdbcType=VARCHAR},
            title = #{title,jdbcType=VARCHAR},
            intro = #{intro,jdbcType=VARCHAR},
            cover_img = #{coverImg,jdbcType=VARCHAR},
            live_start_time = #{liveStartTime,jdbcType=TIMESTAMP},
            live_end_time = #{liveEndTime,jdbcType=TIMESTAMP},
            actual_live_start_time = #{actualLiveStartTime,jdbcType=TIMESTAMP},
            amount = #{amount,jdbcType=DECIMAL},
            left_amount = #{leftAmount,jdbcType=DECIMAL},
            fee = #{fee,jdbcType=DECIMAL},
            `status` = #{status,jdbcType=INTEGER},
            share_num = #{shareNum,jdbcType=INTEGER},
            share_pul = #{sharePul,jdbcType=DECIMAL},
            comment_num = #{commentNum,jdbcType=INTEGER},
            comment_pul = #{commentPul,jdbcType=DECIMAL},
            `view` = #{view,jdbcType=DECIMAL},
            invite_start = #{inviteStart,jdbcType=INTEGER},
            invite_end = #{inviteEnd,jdbcType=INTEGER},
            online_num = #{onlineNum,jdbcType=INTEGER},
            miner_num = #{minerNum,jdbcType=INTEGER},
            hash = #{hash,jdbcType=VARCHAR},
            create_time = #{createTime,jdbcType=TIMESTAMP},
            update_time = #{updateTime,jdbcType=TIMESTAMP},
        </trim>
    </insert>
    <insert id="insertOrUpdateSelective" keyColumn="id" keyProperty="id"
            parameterType="com.bosha.star.api.entity.LiveMining" useGeneratedKeys="true">
        <!--@mbg.generated-->
        insert into live_mining
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="address != null">
                address,
            </if>
            <if test="systemAddress != null">
                system_address,
            </if>
            <if test="charityAddress != null">
                charity_address,
            </if>
            <if test="contractAddress != null">
                contract_address,
            </if>
            <if test="title != null">
                title,
            </if>
            <if test="intro != null">
                intro,
            </if>
            <if test="coverImg != null">
                cover_img,
            </if>
            <if test="liveStartTime != null">
                live_start_time,
            </if>
            <if test="liveEndTime != null">
                live_end_time,
            </if>
            <if test="actualLiveStartTime != null">
                actual_live_start_time,
            </if>
            <if test="amount != null">
                amount,
            </if>
            <if test="leftAmount != null">
                left_amount,
            </if>
            <if test="fee != null">
                fee,
            </if>
            <if test="status != null">
                `status`,
            </if>
            <if test="shareNum != null">
                share_num,
            </if>
            <if test="sharePul != null">
                share_pul,
            </if>
            <if test="commentNum != null">
                comment_num,
            </if>
            <if test="commentPul != null">
                comment_pul,
            </if>
            <if test="view != null">
                `view`,
            </if>
            <if test="inviteStart != null">
                invite_start,
            </if>
            <if test="inviteEnd != null">
                invite_end,
            </if>
            <if test="onlineNum != null">
                online_num,
            </if>
            <if test="minerNum != null">
                miner_num,
            </if>
            <if test="hash != null">
                hash,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
        </trim>
        values
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="address != null">
                #{address,jdbcType=VARCHAR},
            </if>
            <if test="systemAddress != null">
                #{systemAddress,jdbcType=VARCHAR},
            </if>
            <if test="charityAddress != null">
                #{charityAddress,jdbcType=VARCHAR},
            </if>
            <if test="contractAddress != null">
                #{contractAddress,jdbcType=VARCHAR},
            </if>
            <if test="title != null">
                #{title,jdbcType=VARCHAR},
            </if>
            <if test="intro != null">
                #{intro,jdbcType=VARCHAR},
            </if>
            <if test="coverImg != null">
                #{coverImg,jdbcType=VARCHAR},
            </if>
            <if test="liveStartTime != null">
                #{liveStartTime,jdbcType=TIMESTAMP},
            </if>
            <if test="liveEndTime != null">
                #{liveEndTime,jdbcType=TIMESTAMP},
            </if>
            <if test="actualLiveStartTime != null">
                #{actualLiveStartTime,jdbcType=TIMESTAMP},
            </if>
            <if test="amount != null">
                #{amount,jdbcType=DECIMAL},
            </if>
            <if test="leftAmount != null">
                #{leftAmount,jdbcType=DECIMAL},
            </if>
            <if test="fee != null">
                #{fee,jdbcType=DECIMAL},
            </if>
            <if test="status != null">
                #{status,jdbcType=INTEGER},
            </if>
            <if test="shareNum != null">
                #{shareNum,jdbcType=INTEGER},
            </if>
            <if test="sharePul != null">
                #{sharePul,jdbcType=DECIMAL},
            </if>
            <if test="commentNum != null">
                #{commentNum,jdbcType=INTEGER},
            </if>
            <if test="commentPul != null">
                #{commentPul,jdbcType=DECIMAL},
            </if>
            <if test="view != null">
                #{view,jdbcType=DECIMAL},
            </if>
            <if test="inviteStart != null">
                #{inviteStart,jdbcType=INTEGER},
            </if>
            <if test="inviteEnd != null">
                #{inviteEnd,jdbcType=INTEGER},
            </if>
            <if test="onlineNum != null">
                #{onlineNum,jdbcType=INTEGER},
            </if>
            <if test="minerNum != null">
                #{minerNum,jdbcType=INTEGER},
            </if>
            <if test="hash != null">
                #{hash,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
        on duplicate key update
        <trim suffixOverrides=",">
            <if test="id != null">
                id = #{id,jdbcType=BIGINT},
            </if>
            <if test="address != null">
                address = #{address,jdbcType=VARCHAR},
            </if>
            <if test="systemAddress != null">
                system_address = #{systemAddress,jdbcType=VARCHAR},
            </if>
            <if test="charityAddress != null">
                charity_address = #{charityAddress,jdbcType=VARCHAR},
            </if>
            <if test="contractAddress != null">
                contract_address = #{contractAddress,jdbcType=VARCHAR},
            </if>
            <if test="title != null">
                title = #{title,jdbcType=VARCHAR},
            </if>
            <if test="intro != null">
                intro = #{intro,jdbcType=VARCHAR},
            </if>
            <if test="coverImg != null">
                cover_img = #{coverImg,jdbcType=VARCHAR},
            </if>
            <if test="liveStartTime != null">
                live_start_time = #{liveStartTime,jdbcType=TIMESTAMP},
            </if>
            <if test="liveEndTime != null">
                live_end_time = #{liveEndTime,jdbcType=TIMESTAMP},
            </if>
            <if test="actualLiveStartTime != null">
                actual_live_start_time = #{actualLiveStartTime,jdbcType=TIMESTAMP},
            </if>
            <if test="amount != null">
                amount = #{amount,jdbcType=DECIMAL},
            </if>
            <if test="leftAmount != null">
                left_amount = #{leftAmount,jdbcType=DECIMAL},
            </if>
            <if test="fee != null">
                fee = #{fee,jdbcType=DECIMAL},
            </if>
            <if test="status != null">
                `status` = #{status,jdbcType=INTEGER},
            </if>
            <if test="shareNum != null">
                share_num = #{shareNum,jdbcType=INTEGER},
            </if>
            <if test="sharePul != null">
                share_pul = #{sharePul,jdbcType=DECIMAL},
            </if>
            <if test="commentNum != null">
                comment_num = #{commentNum,jdbcType=INTEGER},
            </if>
            <if test="commentPul != null">
                comment_pul = #{commentPul,jdbcType=DECIMAL},
            </if>
            <if test="view != null">
                `view` = #{view,jdbcType=DECIMAL},
            </if>
            <if test="inviteStart != null">
                invite_start = #{inviteStart,jdbcType=INTEGER},
            </if>
            <if test="inviteEnd != null">
                invite_end = #{inviteEnd,jdbcType=INTEGER},
            </if>
            <if test="onlineNum != null">
                online_num = #{onlineNum,jdbcType=INTEGER},
            </if>
            <if test="minerNum != null">
                miner_num = #{minerNum,jdbcType=INTEGER},
            </if>
            <if test="hash != null">
                hash = #{hash,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <resultMap extends="BaseResultMap" id="LIST" type="com.bosha.star.api.dto.web.LiveMiningDto">
        <result column="headImg" property="headImg"/>
        <result column="starName" property="starName"/>
        <result column="pullUrl" property="pullUrl"/>
    </resultMap>
    <select id="countByAddress" resultType="int">
        select count(id)
        from live_mining lm
        where lm.address = #{address}
        <if test="status != null and status.size() != 0">
            and lm.`status` in (
            <foreach collection="status" item="item" separator=",">
                #{item}
            </foreach>
            )
        </if>
    </select>
    <select id="getLastestByAddress" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from live_mining lm where lm.address = #{address}
        order by lm.live_start_time desc
        limit 1
    </select>
    <select id="list" resultMap="LIST">
        select lm.id,
        lm.address,
        lm.title,
        lm.intro,
        lm.cover_img,
        lm.live_start_time,
        lm.live_end_time,
        lm.amount,
        lm.`status`,
        lm.online_num,
        u.head_img headImg,
        s.name starName,
        lms.pull_url pullUrl
        from live_mining lm
        left join live_mining_stream lms on lm.id = lms.live_mining_id
        left join user u on lm.address = u.address
        left join star_member sm on lm.address = sm.address
        left join star s on sm.star_id = s.id
        where 1=1
        <if test="list != null and list.size() != 0">
            and lm.status in
            <foreach close=")" collection="list" item="item" open="(" separator=",">
                #{item}
            </foreach>
        </if>
        order by lm.live_start_time ,lm.id desc
    </select>
    <select id="mine" resultType="com.bosha.star.api.dto.web.LiveMiningMineDto">
        select lm.id,
               lm.address,
               u.head_img                      headImg,
               lm.title,
               s.name                          starName,
               lm.live_start_time              liveStartTime,
               lm.live_end_time                liveEndTime,
               lm.status,
               lm.online_num                   onlineNum,
               lm.amount,
               lm.miner_num                    minerNum,
               (lm.amount - lm.left_amount)    cost,
               (SELECT count(DISTINCT lmi.star_id)
                FROM live_mining_invite lmi
                WHERE lmi.live_mining_id = lm.id
                  AND lmi.star_id IS NOT NULL) inviteStarNum,
               (select ifnull(sum(lmgr.amount), 0)
                from live_mining_gift_record lmgr
                where lmgr.related_id = lm.id) gift,
               lmvc.video_url                  videoUrl,
               ifnull(lmvc.status, 1)          videoStatus
        from live_mining lm
                 left join user u on lm.address = u.address
                 left join star_member sm on lm.address = sm.address
                 left join star s on sm.star_id = s.id
                 left join live_mining_vod_confirm lmvc on lm.id = lmvc.live_mining_id
        where lm.id = #{id}
          and lm.address = #{address}
    </select>
    <select id="mineList" resultType="com.bosha.star.api.dto.web.LiveMiningMineDto">
        select lm.id,
               lm.address,
               u.head_img                      headImg,
               lm.title,
               s.name                          starName,
               lm.live_start_time              liveStartTime,
               lm.live_end_time                liveEndTime,
               lm.status,
               lm.online_num                   onlineNum,
               lm.amount,
               lm.miner_num                    minerNum,
               (lm.amount - lm.left_amount)    cost,
               (SELECT count(DISTINCT lmi.star_id)
                FROM live_mining_invite lmi
                WHERE lmi.live_mining_id = lm.id
                  AND lmi.star_id IS NOT NULL) inviteStarNum,
               (select ifnull(sum(lmgr.amount), 0)
                from live_mining_gift_record lmgr
                where lmgr.related_id = lm.id) gift,
               lmvc.video_url                  videoUrl,
               ifnull(lmvc.status, 1)          videoStatus
        from live_mining lm
                 left join user u on lm.address = u.address
                 left join star_member sm on lm.address = sm.address
                 left join star s on sm.star_id = s.id
                 left join live_mining_vod_confirm lmvc on lm.id = lmvc.live_mining_id
        where lm.address = #{address}
        order by lm.live_start_time desc
    </select>
    <select id="miner" resultType="com.bosha.star.api.dto.web.LiveMiningMinerDto">
        select lm.id,
               lm.title,
               s.name                             starName,
               lm.address,
               lm.status,
               lm.live_start_time                 liveStartTime,
               lm.live_end_time                   liveEndTime,
               (select ifnull(sum(lmgr.amount), 0)
                from live_mining_gift_record lmgr
                where lmgr.address = #{address}
                  and lmgr.related_id = lm.id)    gift,
               (select ifnull(sum(lmr.amount), 0)
                from live_mining_record lmr
                where lmr.address = #{address}
                  and lmr.live_mining_id = #{id}
                  and lmr.status = 1)             amount,
               (select min(lmr.create_time)
                from live_mining_record lmr
                where lmr.address = #{address}
                  and lmr.live_mining_id = #{id}) joinStartTime,
               (select max(lmr.create_time)
                from live_mining_record lmr
                where lmr.address = #{address}
                  and lmr.live_mining_id = #{id}) joinEndTime,
               lmvc.video_url                     videoUrl,
               ifnull(lmvc.status, 1)             videoStatus
        from live_mining lm
                 left join star_member sm on lm.address = sm.address
                 left join star s on sm.star_id = s.id
                 left join live_mining_vod_confirm lmvc on lm.id = lmvc.live_mining_id
        WHERE lm.id = #{id}
    </select>
    <select id="minerList" resultType="com.bosha.star.api.dto.web.LiveMiningMinerDto">
        select lm.id,
               lm.title,
               s.name                             starName,
               lm.address,
               lm.status,
               lm.live_start_time                 liveStartTime,
               lm.live_end_time                   liveEndTime,
               (select ifnull(sum(lmgr.amount), 0)
                from live_mining_gift_record lmgr
                where lmgr.address = #{address}
                  and lmgr.related_id = lm.id)    gift,
               (select ifnull(sum(lmr.amount), 0)
                from live_mining_record lmr
                where lmr.address = #{address}
                  and lmr.live_mining_id = lm.id
                  and lmr.status = 1)             amount,
               (select min(lmr.create_time)
                from live_mining_record lmr
                where lmr.address = #{address}
                  and lmr.live_mining_id = lm.id) joinStartTime,
               (select max(lmr.create_time)
                from live_mining_record lmr
                where lmr.address = #{address}
                  and lmr.live_mining_id = lm.id) joinEndTime,
               lmvc.video_url                     videoUrl,
               ifnull(lmvc.status, 1)             videoStatus
        from live_mining lm
                 left join star_member sm on lm.address = sm.address
                 left join star s on sm.star_id = s.id
                 left join live_mining_vod_confirm lmvc on lm.id = lmvc.live_mining_id
        order by lm.live_start_time desc, lm.id desc
    </select>
    <select id="pushStartNoticeList" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from live_mining lm
        where lm.status = 1
        and lm.live_start_time = #{time}
    </select>
    <select id="pushEndNoticeList" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from live_mining lm
        where lm.status = 2
        and lm.live_start_time = #{time}
    </select>
    <select id="closeLive" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from live_mining lm
        where lm.live_end_time &lt;= #{now}
        and lm.status in (0,1,2)
    </select>
    <select id="liveRoomInfo" resultType="com.bosha.star.api.dto.web.LiveRoomInfoDto">
        select lm.id,
               lm.cover_img                                                             coverImg,
               lm.address,
               lm.title,
               u.nick_name                                                              nickName,
               u.head_img                                                               headImg,
               s.name                                                                   starName,
               lm.live_start_time                                                       liveStartTime,
               lm.live_end_time                                                         liveEndTime,
               lm.amount,
               lm.`status`,
               lm.online_num                                                            onlineNum,
               lm.miner_num                                                             minerNum,
               lm.left_amount                                                           leftAmount,
               lms.pull_url                                                             pullUrl,
               (select ifnull(count(*), 0) from star_member sm where sm.star_id = s.id) starMemberCount
        from live_mining lm
                 left join user u on lm.address = u.address
                 left join star_member sm on lm.address = sm.address
                 left join star s on sm.star_id = s.id
                 left join live_mining_stream lms on lms.live_mining_id = lm.id
        where lm.id = #{id}
    </select>
    <select id="headImgs" resultType="java.lang.String">
        select u.head_img from user u where u. address in
        <foreach close=")" collection="addresses" item="item" open="(" separator=",">
            #{item}
        </foreach>
    </select>
    <select id="calcMinerNum" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from live_mining lm
        where lm.status in (1,2)
        and lm.live_start_time &lt;= #{time} and lm.live_end_time &gt;= #{time}
    </select>
    <select id="createChatroom" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from live_mining lm
        where lm.live_start_time = #{time}
    </select>

    <select id="calcPerMinute" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from live_mining lm
        where lm.status in (2,3)
        and lm.live_end_time &gt;= #{endTime}
        and lm.left_amount >0
    </select>
    <select id="calcOnlineNum" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from live_mining lm
        where `status` = 2 or ABS(
        timestampdiff( MINUTE, live_start_time, NOW() )) &lt;= 35 or
        abs( timestampdiff( MINUTE, live_end_time, NOW() ) ) &lt;= 60
    </select>
    <select id="unEditVideoIds" resultType="java.lang.Long">
        select lm.id
        from live_mining lm
                 left join live_mining_vod_confirm lmvc on lm.id = lmvc.live_mining_id
        where lm.status = 3
          and lmvc.live_mining_id is null
    </select>
    <select id="addressList" resultType="java.lang.String">
        select address
        from user
    </select>
    <select id="histories" resultMap="LIST">
        select lm.id,
               lm.address,
               lm.title,
               lm.intro,
               lm.cover_img,
               lm.live_start_time,
               lm.live_end_time,
               lm.amount,
               lm.`status`,
               lm.online_num,
               u.head_img headImg,
               s.name     starName
        from live_mining lm
                 left join user u on lm.address = u.address
                 left join star_member sm on lm.address = sm.address
                 left join star s on sm.star_id = s.id
        where lm.status = 3
        order by lm.live_end_time desc, lm.id desc
    </select>
    <select id="count" resultType="int">
        select count(*)
        from live_mining
    </select>
    <select id="search" resultMap="LIST">
        select lm.id,
               lm.address,
               lm.title,
               lm.intro,
               lm.cover_img,
               lm.live_start_time,
               lm.live_end_time,
               lm.amount,
               lm.`status`,
               lm.online_num,
               u.head_img   headImg,
               s.name       starName,
               lms.pull_url pullUrl
        from live_mining lm
                 left join live_mining_stream lms on lm.id = lms.live_mining_id
                 left join user u on lm.address = u.address
                 left join star_member sm on lm.address = sm.address
                 left join star s on sm.star_id = s.id
        where lm.status &gt; 0
          and (lm.title like concat('%', #{keyword}, '%')
            or s.name like concat('%', #{keyword}, '%'))
        order by lm.status, lm.live_start_time desc
    </select>
</mapper>